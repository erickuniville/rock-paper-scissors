package br.com.erick.ui;

import br.com.erick.core.Battle;
import br.com.erick.core.EnemyIntelligence;
import br.com.erick.dao.TeamDAO;
import br.com.erick.model.Monster;
import br.com.erick.model.Player;
import br.com.erick.model.Team;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;
import java.util.List;

import static br.com.erick.constants.Constants.PAPER;
import static br.com.erick.constants.Constants.ROCK;
import static br.com.erick.constants.Constants.SCISSORS;

/**
 * Created by erick.budal on 12/11/2017.
 */
public class ChooseTeamForm {
    private JPanel panelChooseTeam;
    private JComboBox comboBoxTeams;
    private JButton buttonStartBattle;
    private JButton buttonNewTeam;
    private JTextArea textAreaInformation;
    private JLabel labelSelectTeam;
    private JTable tableSelectedTeam;
    private JFrame frame;

    private List<Team> teams;
    private TeamDAO teamDAO;

    public ChooseTeamForm() {
        teamDAO = new TeamDAO();
        teams = teamDAO.getTeams();
        DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel();
        for (Team team : teams) {
            comboBoxModel.addElement(team);
        }
        comboBoxTeams.setModel(comboBoxModel);

        buttonStartBattle.addActionListener(e -> buttonStartBattleClicked());
        comboBoxTeams.addItemListener(e -> comboBoxItemChanged());
        buttonNewTeam.addActionListener(e -> buttonCreateTeamClicked());

        Border outsideBorder = BorderFactory.createLineBorder(Color.BLACK);
        Border insideBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
        textAreaInformation.setBorder(BorderFactory.createCompoundBorder(outsideBorder, insideBorder));
        comboBoxItemChanged();

        frame = new JFrame("ChooseTeamForm");
        frame.setContentPane(panelChooseTeam);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setResizable(false);
    }

    public JComboBox getComboBoxTeams() {
        return comboBoxTeams;
    }

    public void setComboBoxTeams(JComboBox comboBoxTeams) {
        this.comboBoxTeams = comboBoxTeams;
    }

    public JFrame getFrame() {
        return frame;
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    private void buttonStartBattleClicked() {
        final int DEFAULT_HP = 100;
        Monster rockMonsterEnemy = EnemyIntelligence.generateMonster(ROCK);
        Monster paperMonsterEnemy = EnemyIntelligence.generateMonster(PAPER);
        Monster scissorsMonsterEnemy = EnemyIntelligence.generateMonster(SCISSORS);

        Team team = (Team) comboBoxTeams.getSelectedItem();

        Player playerA = new Player("Player", DEFAULT_HP, team.getRockMonster(), team.getPaperMonster(), team.getScissorMonster());
        Player playerB = new Player("Enemy", DEFAULT_HP, rockMonsterEnemy, paperMonsterEnemy, scissorsMonsterEnemy);

        Battle battle = new Battle(playerA, playerB);

        new BattleForm(battle, this);

        frame.setVisible(false);
    }

    private void comboBoxItemChanged() {
        if (comboBoxTeams.getSelectedItem() == null) {
            System.out.println("Teams ComboBox is null.");
        } else {
            Monster rockMonster = ((Team) comboBoxTeams.getSelectedItem()).getRockMonster();
            Monster paperMonster = ((Team) comboBoxTeams.getSelectedItem()).getPaperMonster();
            Monster scissorsMonster = ((Team) comboBoxTeams.getSelectedItem()).getScissorMonster();

            String teamInformation = "TYPE             ATK              DEF" +
                    "\n------------------------------------------------" +
                    "\nROCK\t" + rockMonster.getStrength() + "\t" + rockMonster.getDefense() +
                    "\n\nPAPER\t" + paperMonster.getStrength() + "\t" + paperMonster.getDefense() +
                    "\n\nSCISSOR\t" + scissorsMonster.getStrength() + "\t" + scissorsMonster.getDefense();

            textAreaInformation.setText(teamInformation);
        }
    }

    private void buttonCreateTeamClicked() {
        new CreateNewTeamForm(this);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelChooseTeam = new JPanel();
        panelChooseTeam.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        panelChooseTeam.setMaximumSize(new Dimension(558, 430));
        panelChooseTeam.setMinimumSize(new Dimension(558, 430));
        panelChooseTeam.setOpaque(false);
        panelChooseTeam.setPreferredSize(new Dimension(558, 430));
        comboBoxTeams = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        comboBoxTeams.setModel(defaultComboBoxModel1);
        panelChooseTeam.add(comboBoxTeams, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(240, 30), new Dimension(240, 30), new Dimension(240, 30), 0, false));
        buttonStartBattle = new JButton();
        buttonStartBattle.setText("Start with this team");
        panelChooseTeam.add(buttonStartBattle, new GridConstraints(7, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(170, 30), new Dimension(170, 30), new Dimension(170, 30), 0, false));
        textAreaInformation = new JTextArea();
        textAreaInformation.setEditable(false);
        textAreaInformation.setFocusable(true);
        textAreaInformation.setFont(new Font(textAreaInformation.getFont().getName(), textAreaInformation.getFont().getStyle(), 18));
        panelChooseTeam.add(textAreaInformation, new GridConstraints(5, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(300, 220), new Dimension(300, 220), new Dimension(300, 220), 0, false));
        final Spacer spacer1 = new Spacer();
        panelChooseTeam.add(spacer1, new GridConstraints(3, 0, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panelChooseTeam.add(spacer2, new GridConstraints(3, 4, 6, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panelChooseTeam.add(spacer3, new GridConstraints(8, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        labelSelectTeam = new JLabel();
        labelSelectTeam.setFont(new Font(labelSelectTeam.getFont().getName(), labelSelectTeam.getFont().getStyle(), 14));
        labelSelectTeam.setText("Select your monsters team:");
        panelChooseTeam.add(labelSelectTeam, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panelChooseTeam.add(spacer4, new GridConstraints(4, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(1, 1), new Dimension(1, 1), new Dimension(1, 1), 0, false));
        buttonNewTeam = new JButton();
        buttonNewTeam.setText("Create new team");
        panelChooseTeam.add(buttonNewTeam, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(170, 30), new Dimension(170, 30), new Dimension(170, 30), 0, false));
        final Spacer spacer5 = new Spacer();
        panelChooseTeam.add(spacer5, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        panelChooseTeam.add(spacer6, new GridConstraints(6, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelChooseTeam;
    }
}
